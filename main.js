"use strict";


/* 
getBoundingClientRect возвращает корды относительно вьюпорта 
(вьюпорт приближается к элементу когда мы скролим и растояние сужается)
так как вьюпорт может менять местоположение относительно страницы при скролле
*/

/*

спред оператор в аргументах функции собирает все аргументы переданные нами в массив

*/


/*

WINDOWS

dir -- эта команда показывает директории в текущей директории

GIT

git --help
git init -- инициализация проекта (связывание git с текущим проектом),
после этой команды создаётся скрытая папка .git в которой хранится информация о проекте
она нужна для системы контроля версий, как правило базовый разраб в неё не лезет

в табе вскода виден статус гита (если он проинициализирован в проекте) 
(вскод например подсвечивает файлики не добавленные в текущую сохранёнку гита)

git status -- что сейчас происходит в проекте с git

git add <filename> -- добавляет файл в текущую сохранёнку проекта для коммита 
то есть добавляем файлы в фиксацию
(эту сохранёнку из файлов мы как раз комитим) - то есть делаем фиксацию версии приложения 
(которую например позже мы можем отправить удалённо на github)
--git add . -- позволяет добавить сразу все файлы в текущую сохранёнку

git rm --cached <filename> -- с помощью этой команды мы можем убрать какой то 
конкретный файл из текущей сохранёнки (для коммита) проекта
--git rm -r --cached . --- эта команда удалит все файлы из текущей сохранёнки 
(не надо забывать флаг -r)

--если мы что то меняем в текущей сохранёнке то нам нужно снова уже свежую версию каких либо файлов 
добавить в текущую сохранёнку (что бы в коммит попала свежая версия файла)

--основная разработка идёт на ветке master
(когда мы создаём или меняем ветки, то на одной ветке будут одни файлы и зменения а на другой другие 
это не ломает проект)

git merge <branch name> -- эта команда совмещает ветку на которой мы находимя с веткой,
указанной в команде и получается некое слияние веток (одну из которых мы можем потом удалить)

--когда мы первый раз скачали git то нужно в нём указать наши данные (это имя и почту), что бы при
совместной разработке, когда человек делает коммит или как то манипулирует проектом было видно
кто это сделал (так как будут отображаться данные, которые были введены в git)

git config --global user.name <user name> -- эта команда возвращает 
(если не пишем название то возвращается записанное название ) или задаёт имя пользователя глобально
(то есть видное всем) для git

git config --global user.email <email user> -- эта команда возвращает (если не задано значение)
или задаёт почту для пользователя в git

(эти команды задают учётные данные)

credentials -- учётные данные
track -- следить отслеживать


git config --list -- возвращает все настройки и введённые данные (в том числе учётную запись) в git

git branch -M <new file name> -- эта команда переименовывает существующую ветку



pull request -- это ветки других пользователей (которые добавляют какие то фичи в проект
и мы можем их принять или отклонить)




*/

console.log("some text")


